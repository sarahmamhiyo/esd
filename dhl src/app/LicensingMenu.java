/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import netutils.NetworkManager;
import org.json.simple.JSONObject;

/**
 *
 * @author Tinashe
 */
public class LicensingMenu extends javax.swing.JPanel {

    String TAG = "LicensingMenu";

    /**
     * Creates new form LicensingMenu
     */
    public LicensingMenu() {
        initComponents();

        process_btn.addActionListener(new ProcessListener());

        setParameters();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        sytemTypeLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        sytemIDLabel = new javax.swing.JLabel();
        installDateLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        expiryDateLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        org_name = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        licenseStatus = new javax.swing.JLabel();
        process_btn = new javax.swing.JButton();
        process_status = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "App licensing", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 0, 11))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel1.setText("System Type:");

        sytemTypeLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        sytemTypeLabel.setText("-");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel2.setText("System ID:");

        sytemIDLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        sytemIDLabel.setText("-");

        installDateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        installDateLabel.setText("-");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel3.setText("Installation Date:");

        expiryDateLabel.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        expiryDateLabel.setText("-");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel4.setText("Expiry Date:");

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel5.setText("Name Of Organization:");

        org_name.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel6.setText("License Type:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel7.setText("License Status:");

        licenseStatus.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        licenseStatus.setText("-");

        process_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        process_btn.setText("Submit");

        process_status.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        process_status.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        process_status.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(process_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(process_btn)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sytemTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sytemIDLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(installDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(expiryDateLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(org_name, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(licenseStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(195, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(sytemTypeLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(sytemIDLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(installDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(expiryDateLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(org_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(licenseStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(process_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(process_status)
                .addContainerGap(276, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel expiryDateLabel;
    private static javax.swing.JLabel installDateLabel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private static javax.swing.JLabel licenseStatus;
    private static javax.swing.JTextField org_name;
    private static javax.swing.JButton process_btn;
    private static javax.swing.JLabel process_status;
    private static javax.swing.JLabel sytemIDLabel;
    private static javax.swing.JLabel sytemTypeLabel;
    // End of variables declaration//GEN-END:variables
    String app_mode = "register";
    ExecutorService executor = Executors.newFixedThreadPool(2);

    void setParameters() {
        //Set params
        if (Config.SAVED_MACHINE_INFO != null && Config.SAVED_MACHINE_INFO.size() > 0) {
            System.out.println(TAG + ", Config.SAVED_MACHINE_INFO:");
            System.out.println(Config.SAVED_MACHINE_INFO);

            sytemTypeLabel.setText(Config.SAVED_MACHINE_INFO.get("OS_Type"));
            sytemIDLabel.setText(Config.SAVED_MACHINE_INFO.get("UUID"));
            installDateLabel.setText(Config.SAVED_MACHINE_INFO.get("CURRENT_DATE"));
            expiryDateLabel.setText(Config.SAVED_MACHINE_INFO.get("DATE_OF_EXPIRY"));
            org_name.setText(Config.SAVED_MACHINE_INFO.get("name"));

            licenseStatus.setText(Config.SAVED_MACHINE_INFO.get("Status"));
            if (Config.SAVED_MACHINE_INFO.get("Status").equalsIgnoreCase("registered active")) {
                process_btn.setVisible(false);
            } else if (Config.SAVED_MACHINE_INFO.get("Status").equalsIgnoreCase("registered not active")) {
                process_btn.setVisible(true);
                process_btn.setText("Activate");
                app_mode = "activate";
                licenseStatus.setForeground(Color.red);

            } else {
                process_btn.setVisible(true);
                licenseStatus.setForeground(Color.red);
                app_mode = "register";
            }
        } else {
            System.out.println(TAG + ", Config.SAVED_MACHINE_INFO is empty");
            licenseStatus.setText("Failed to read licensing info.");
            licenseStatus.setForeground(Color.red);
        }

    }

    class ProcessListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            System.out.println("ProcessListener running.." + app_mode);
            process_btn.setEnabled(false);
            if (app_mode.equalsIgnoreCase("register")) {
                //Register this user or org
                String name = org_name.getText().toString();
                System.out.println("ProcessListener name: " + name);
                if (name != null && !name.equalsIgnoreCase("")) {
                    //Submit details to server
                    Map<String, Object> params = new LinkedHashMap<>();
                    params.put("name", name);
                    params.put("OS_Type", Config.SAVED_MACHINE_INFO.get("OS_Type"));
                    params.put("UUID", Config.SAVED_MACHINE_INFO.get("UUID"));

                    process_status.setText("Processing, please wait ...");
                    //Register app online
                    //registerOnline(name, params);
                    //Register app offline
                    registerAndActivateOffline(name);
                } else {
                    JOptionPane.showMessageDialog(
                            LicensingMenu.this,
                            "Enter organization name first",
                            "Alert",
                            JOptionPane.WARNING_MESSAGE);

                    process_btn.setEnabled(true);
                }
            } else if (app_mode.equalsIgnoreCase("activate")) {
                //Submit details to server
                Map<String, Object> params = new LinkedHashMap<>();
                params.put("UUID", Config.SAVED_MACHINE_INFO.get("UUID"));

                process_status.setText("Processing, please wait ...");
                //Activate app
                activateOnline(params);
            }
        }

        void registerAndActivateOffline(String name) {
            //Set app registered
            Config.SAVED_MACHINE_INFO.put("Status", "registered active");
            Config.SAVED_MACHINE_INFO.put("name", name);
            process_status.setForeground(Color.green);

            System.out.println(TAG + ", Final Config.SAVED_MACHINE_INFO:");
            System.out.println(Config.SAVED_MACHINE_INFO);
            //Save activation settings
            if (!SystemInit.serialize_object_to_file("aclin", Config.SAVED_MACHINE_INFO)) {
                System.out.println(TAG + ", Failed to save activation settings.");
            } else {
                String msg = "Temporary licence installed. Restart app now.";
                process_status.setText(msg);
            }

            process_btn.setEnabled(false);
        }

        void registerOnline(String name, Map<String, Object> params) {
            Future<JSONObject> response = executor.submit(new NetworkManager("register.php", params));
            //Check & wait for response
            boolean response_received = false;
            int trial_attempts = 0;
            while (!response_received && trial_attempts < 6) {
                try {
                    JSONObject responseObj = response.get(3, TimeUnit.SECONDS);
                    //Reset response_received
                    response_received = true;
                    //Process response
                    if (responseObj != null) {
                        System.out.println(TAG + ", response:");
                        System.out.println(responseObj);
                        long status = (Long) responseObj.get("status");
                        String msg = (String) responseObj.get("msg");
                        process_status.setText(msg);

                        if (status == 1) {
                            //Set app registered
                            Config.SAVED_MACHINE_INFO.put("Status", "registered not active");
                            Config.SAVED_MACHINE_INFO.put("name", name);
                            process_status.setForeground(Color.green);
                        } else if (status == 3) {
                            //Set app registered
                            Config.SAVED_MACHINE_INFO.put("Status", "registered active");
                            Config.SAVED_MACHINE_INFO.put("name", name);
                            process_status.setForeground(Color.green);
                        } else if (status == 4) {
                            //Set app registered
                            Config.SAVED_MACHINE_INFO.put("Status", "registered not active");
                            Config.SAVED_MACHINE_INFO.put("name", name);
                            process_status.setForeground(Color.red);
                        } else if (status == 2) {
                            //Set app registered
                            Config.SAVED_MACHINE_INFO.put("Status", "not registered");
                            Config.SAVED_MACHINE_INFO.put("name", name);
                            process_status.setForeground(Color.red);
                        }

                        System.out.println(TAG + ", Final Config.SAVED_MACHINE_INFO:");
                        System.out.println(Config.SAVED_MACHINE_INFO);
                        //Save activation settings
                        if (!SystemInit.serialize_object_to_file("aclin", Config.SAVED_MACHINE_INFO)) {
                            System.out.println(TAG + ", Failed to save activation settings.");
                        }

                        process_btn.setEnabled(true);
                    } else {
                        process_status.setText("Failed to connect to activation server.");
                        process_status.setForeground(Color.red);
                        process_btn.setEnabled(true);
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(LicensingMenu.class.getName()).log(Level.SEVERE, null, ex);
                    process_btn.setEnabled(true);
                } catch (ExecutionException ex) {
                    Logger.getLogger(LicensingMenu.class.getName()).log(Level.SEVERE, null, ex);
                    process_btn.setEnabled(true);
                } catch (TimeoutException ex) {
                    try {
                        Thread.sleep(3000);
                        trial_attempts++;
                    } catch (InterruptedException ex1) {
                        Logger.getLogger(LicensingMenu.class.getName()).log(Level.SEVERE, null, ex1);
                        process_btn.setEnabled(true);
                    }
                }
            }
        }

        void activateOnline(Map<String, Object> params) {
            Future<JSONObject> response = executor.submit(new NetworkManager("check_license.php", params));
            //Check & wait for response
            boolean response_received = false;
            int trial_attempts = 0;
            while (!response_received && trial_attempts < 6) {
                try {
                    JSONObject responseObj = response.get(3, TimeUnit.SECONDS);
                    //Reset response_received
                    response_received = true;
                    //Process response
                    if (responseObj != null) {
                        System.out.println(TAG + ", response:");
                        System.out.println(responseObj);
                        long status = (Long) responseObj.get("status");
                        String msg = (String) responseObj.get("msg");
                        process_status.setText(msg);

                        if (status == 1) {
                            //Set app registered
                            Config.SAVED_MACHINE_INFO.put("Status", "registered active");
                            process_status.setForeground(Color.green);

                            System.out.println(TAG + ", Final Config.SAVED_MACHINE_INFO:");
                            System.out.println(Config.SAVED_MACHINE_INFO);
                            //Save activation settings
                            if (!SystemInit.serialize_object_to_file("aclin", Config.SAVED_MACHINE_INFO)) {
                                System.out.println(TAG + ", Failed to save activation settings.");
                            }

                            process_btn.setEnabled(false);
                        } else {
                            process_btn.setEnabled(true);
                        }

                    } else {
                        process_status.setText("Failed to connect to activation server.");
                        process_status.setForeground(Color.red);
                        process_btn.setEnabled(true);
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(LicensingMenu.class.getName()).log(Level.SEVERE, null, ex);
                    process_btn.setEnabled(true);
                } catch (ExecutionException ex) {
                    Logger.getLogger(LicensingMenu.class.getName()).log(Level.SEVERE, null, ex);
                    process_btn.setEnabled(true);
                } catch (TimeoutException ex) {
                    try {
                        Thread.sleep(3000);
                        trial_attempts++;
                    } catch (InterruptedException ex1) {
                        Logger.getLogger(LicensingMenu.class.getName()).log(Level.SEVERE, null, ex1);
                        process_btn.setEnabled(true);
                    }
                }
            }
        }

    }
}
