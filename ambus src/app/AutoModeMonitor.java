/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app;

import autoutils.BackgroundWorker;
import dbutils.DbManager;
import emailutils.SendMail;
import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.time.LocalDate;
import static java.time.temporal.ChronoUnit.DAYS;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;
import netutils.NetworkManager;
import org.json.simple.JSONObject;
import pdfutils.PRNGenerator;

/**
 *
 * @author Tinashe
 */
public class AutoModeMonitor extends javax.swing.JPanel {

    String TAG = "AutoModeMonitor";

    /**
     * Creates new form AutoModeMonitor
     */
    public AutoModeMonitor() {
        initComponents();

        initMonitoringTable();

        initErrorTables();

        process_again.addActionListener(new ProcessInvoicesAgainListener());
        view_missing_files_list.addActionListener(new OpenMissingFilesListListener());
        view_missing_files_list.setVisible(false);

        delete_invoice_btn.addActionListener(new DeleteInvoiceListener());

        //lineExecutor.submit(new StatusMonitorThread());
        monitor_task = new MonitorTask();
        timer = new Timer();
        timer.scheduleAtFixedRate(monitor_task, 3000, 3000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        monitoring_data_table = new javax.swing.JTable();
        progress_lbl = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        error_invoices_table = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        error_prns_table = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        error_emails_table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        total_error_invoices = new javax.swing.JLabel();
        total_error_prns = new javax.swing.JLabel();
        total_emails_outbox = new javax.swing.JLabel();
        process_again = new javax.swing.JButton();
        reprocess_status = new javax.swing.JLabel();
        view_missing_files_list = new javax.swing.JButton();
        delete_invoice_btn = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(750, 580));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Auto Mode Monitor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 0, 11))); // NOI18N

        monitoring_data_table.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        monitoring_data_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(monitoring_data_table);

        progress_lbl.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        progress_lbl.setText("-");

        error_invoices_table.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        error_invoices_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(error_invoices_table);

        error_prns_table.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        error_prns_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(error_prns_table);

        error_emails_table.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        error_emails_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(error_emails_table);

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel1.setText("Progress Monitor:");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel2.setText("Incoming Invoice Errors:");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel3.setText("PRN Errors:");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel4.setText("Email Outbox:");

        total_error_invoices.setFont(new java.awt.Font("Trebuchet MS", 1, 11)); // NOI18N
        total_error_invoices.setText("-");

        total_error_prns.setFont(new java.awt.Font("Trebuchet MS", 1, 11)); // NOI18N
        total_error_prns.setText("-");

        total_emails_outbox.setFont(new java.awt.Font("Trebuchet MS", 1, 11)); // NOI18N
        total_emails_outbox.setText("-");

        process_again.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        process_again.setText("Process Again");

        reprocess_status.setFont(new java.awt.Font("Trebuchet MS", 0, 9)); // NOI18N
        reprocess_status.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        reprocess_status.setText("-");

        view_missing_files_list.setFont(new java.awt.Font("Trebuchet MS", 0, 9)); // NOI18N
        view_missing_files_list.setText("View");

        delete_invoice_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        delete_invoice_btn.setText("Remove Invoice");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(total_error_prns, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(188, 188, 188))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 441, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(total_error_invoices, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(process_again))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(reprocess_status, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(view_missing_files_list)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(delete_invoice_btn))
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progress_lbl, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(total_emails_outbox, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(total_error_prns)
                                    .addComponent(jLabel4)
                                    .addComponent(total_emails_outbox)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(total_error_invoices)
                                    .addComponent(process_again))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(delete_invoice_btn)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(reprocess_status)
                                        .addComponent(view_missing_files_list)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(progress_lbl)
                        .addGap(126, 126, 126)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 796, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton delete_invoice_btn;
    private static javax.swing.JTable error_emails_table;
    private static javax.swing.JTable error_invoices_table;
    private static javax.swing.JTable error_prns_table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private static javax.swing.JTable monitoring_data_table;
    private static javax.swing.JButton process_again;
    private static javax.swing.JLabel progress_lbl;
    private static javax.swing.JLabel reprocess_status;
    private static javax.swing.JLabel total_emails_outbox;
    private static javax.swing.JLabel total_error_invoices;
    private static javax.swing.JLabel total_error_prns;
    private static javax.swing.JButton view_missing_files_list;
    // End of variables declaration//GEN-END:variables

    ExecutorService lineExecutor = Executors.newSingleThreadExecutor();
    DefaultTableModel monitoringTableModel = new DefaultTableModel(0, 3);
    DefaultTableModel error_invoices_Model = new DefaultTableModel(0, 3);
    DefaultTableModel error_prns_table_Model = new DefaultTableModel(0, 3);
    DefaultTableModel error_emails_table_Model = new DefaultTableModel(0, 3);
    long total_invoice_errors = 0, total_prn_errors = 0, total_emails_to_send = 0;
    HashMap<String, ArrayList<String>> error_invoices = null;
    String missing_files_file = null;
    boolean monitor_progress = true;
    MonitorTask monitor_task = null;
    Timer timer = null;
    int check_count = 0;
    long time_lapsed = 0;
    //final long half_a_day = 12 * 60 * 60 * 1000;//12 hours
    final long half_an_hour = 30 * 60 * 1000;// 30mins

    void initMonitoringTable() {
        monitoring_data_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // add header of the table
        String header[] = new String[]{"Task", "Progress", "Last Updated"};
        monitoringTableModel.setColumnIdentifiers(header);
        //Get the stats
        monitoringTableModel.addRow(new String[]{
            "Total New Invoices Received:",
            "-",
            ""
        });

        monitoringTableModel.addRow(new String[]{
            "Total New PRN Files Created:",
            "-",
            ""
        });

        monitoringTableModel.addRow(new String[]{
            "Total New HTML Receipts Received:",
            "-",
            ""
        });

        monitoringTableModel.addRow(new String[]{
            "Total New Invoices Signed:",
            "-",
            ""
        });

        monitoringTableModel.addRow(new String[]{
            "Total New Signed Invoices Sent:",
            "-",
            ""
        });

        monitoring_data_table.setModel(monitoringTableModel);

        resizeColumnWidth(monitoring_data_table);
    }

    void initErrorTables() {
        error_invoices_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        error_prns_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        error_emails_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // add header of the table
        String header[] = new String[]{"Invoice Name", "Received", "PRN Created"};
        error_invoices_Model.setColumnIdentifiers(header);
        error_invoices_table.setModel(error_invoices_Model);
        resizeColumnWidth(error_invoices_table);

        header = new String[]{"PRN Name", "Received", "Signed"};
        error_prns_table_Model.setColumnIdentifiers(header);
        error_prns_table.setModel(error_prns_table_Model);
        resizeColumnWidth(error_prns_table);

        header = new String[]{"Receipt Name", "Email","Processed", "Status"};
        error_emails_table_Model.setColumnIdentifiers(header);
        error_emails_table.setModel(error_emails_table_Model);

        resizeColumnWidth(error_emails_table);
    }

    void monitor_progress() {

        //Get the stats
        monitoringTableModel.setValueAt(BackgroundWorker.total_sap_invoices_received + "", 0, 1);
        monitoringTableModel.setValueAt(BackgroundWorker.total_prn_files_created + "", 1, 1);
        monitoringTableModel.setValueAt(BackgroundWorker.total_html_receipts_received + "", 2, 1);
        monitoringTableModel.setValueAt(BackgroundWorker.total_sap_invoices_signed + "", 3, 1);
        monitoringTableModel.setValueAt(BackgroundWorker.total_signed_invoices_sent + "", 4, 1);

        //Get error invoices
        DbManager db_manager = new DbManager();
        error_invoices = db_manager.get_error_invoices();
        //System.out.println(TAG + ", error_invoices:");
        //System.out.println(error_invoices);
        if (error_invoices != null && error_invoices.size() > 0) {
            //Empty the tables 
            error_invoices_Model.setRowCount(0);
            error_prns_table_Model.setRowCount(0);
            error_emails_table_Model.setRowCount(0);
            //Reset counters
            total_invoice_errors = 0;
            total_prn_errors = 0;
            total_emails_to_send = 0;

            for (Object key : error_invoices.keySet()) {
                String file_name = (String) key;
                ArrayList<String> invoice_info = error_invoices.get(key);
                String id = invoice_info.get(0);
                String submitted = invoice_info.get(1);
                //Check if prn file created from invoice
                if (invoice_info.get(2).equalsIgnoreCase("1")) {
                    //Check if invoice has been signed
                    if (!invoice_info.get(3).equalsIgnoreCase("1")) {
                        //Add to table, while avoiding duplicates
                        addToErrorPRNs(file_name, submitted);
                        //Increment total_prn_errors
                        total_prn_errors++;
                    } else {
                        //Invoice has been prned & signed, check if it has been emailed
                        if (invoice_info.get(4).equalsIgnoreCase("0")) {
                            String sending_progress = invoice_info.get(5);
                            String recepient = invoice_info.get(7);
                            addToErrorEmails(file_name, recepient, submitted, sending_progress, db_manager);
                            //Increment
                            total_emails_to_send++;
                        }
                    }
                } else {
                    //Add to table, while avoiding duplicates
                    addToErrorInvoices(file_name, submitted);
                    //Increment total_invoice_errors
                    total_invoice_errors++;
                }
            }

            //Display counters
            total_error_invoices.setText("(" + total_invoice_errors + ")");
            total_error_prns.setText("(" + total_prn_errors + ")");
            total_emails_outbox.setText("(" + total_emails_to_send + ")");

        } else {
            //Empty the tables 
            error_invoices_Model.setRowCount(0);
            error_prns_table_Model.setRowCount(0);
            error_emails_table_Model.setRowCount(0);

            //Display counters
            total_error_invoices.setText("(" + total_invoice_errors + ")");
            total_error_prns.setText("(" + total_prn_errors + ")");
            total_emails_outbox.setText("(" + total_emails_to_send + ")");

        }

    }

    void addToErrorInvoices(String file_name, String submitted) {
        //Add to table, while avoiding duplicates
        error_invoices_Model.addRow(new String[]{file_name, submitted, "no"});
        resizeColumnWidth(error_invoices_table);
    }

    void addToErrorPRNs(String file_name, String submitted) {
        //Add to table, while avoiding duplicates
        error_prns_table_Model.addRow(new String[]{file_name, submitted, "no"});
        resizeColumnWidth(error_prns_table);
    }

    void addToErrorEmails(String file_name, String recepient, String submitted, String sending_progress, DbManager db_manager) {
        //Add to table, while avoiding duplicates
        error_emails_table_Model.addRow(new String[]{file_name, recepient, submitted, sending_progress});
        resizeColumnWidth(error_emails_table);
        //Resubmit this invoice for resending if its first time checking & it says "in progress"
        /*
         if (check_count == 0 && sending_progress.equalsIgnoreCase("in progress")) {
         if (db_manager.set_invoice_sent_status(file_name, 0)) {
         System.out.println(TAG + ", signed invoice: " + file_name + " submitted for re-sending.");
         check_count++;
         } else {
         System.out.println(TAG + ", failed to update sent status in db for: " + file_name);
         }
         }
         */
    }

    class DeleteInvoiceListener implements ActionListener {

        String TAG = "DeleteInvoiceListener";

        @Override
        public void actionPerformed(ActionEvent e) {
            int selectedRow = error_invoices_table.getSelectedRow();
            System.out.println(TAG + ", selectedRow: " + selectedRow);
            if (selectedRow != -1) {
                String invoice_name = (String) error_invoices_Model.getValueAt(selectedRow, 0);
                //Ask user to confirm
                String confirm_delete_msg = "Do you want to delete invoice: (" + invoice_name + ")?";
                int response = JOptionPane.showConfirmDialog(AutoModeMonitor.this, confirm_delete_msg, "Delete Invoice", JOptionPane.YES_NO_OPTION);
                if (response == JOptionPane.YES_OPTION) {
                    //Suspend the monitoring process
                    monitor_progress = false;
                    //Delete the invoice from db
                    DbManager db_manager = new DbManager();
                    if (db_manager.delete_empty_invoice(invoice_name)) {
                        reprocess_status.setText(invoice_name + " removed.");
                    } else {
                        reprocess_status.setText("Failed to remove " + invoice_name);
                    }
                    //Resume the monitoring process
                    monitor_progress = true;
                }
            } else {
                JOptionPane.showMessageDialog(
                        AutoModeMonitor.this,
                        "Select an inovice first!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        }

    }

    class ProcessInvoicesAgainListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (error_invoices != null && error_invoices.size() > 0) {
                //Suspend the monitoring process
                monitor_progress = false;
                //Disable the process_again btn
                process_again.setEnabled(false);
                DbManager db_manager = new DbManager();
                //Delete the error invoices
                if (db_manager.delete_error_invoices(error_invoices)) {
                    //Rename the invoices from .sen to .pdf
                    int renaming_count = 0;
                    ArrayList<String> missing_files = new ArrayList();
                    for (Object key : error_invoices.keySet()) {
                        String file_name = (String) key;
                        String pdf_invoice_file_pathname = Config.SAP_INVOICES_PATH + file_name;
                        String sen_invoice_file_pathname = Config.SAP_INVOICES_PATH + file_name.replace("pdf", "sen");
                        //Create the file objects
                        File pdf_file = new File(pdf_invoice_file_pathname);
                        File sen_file = new File(sen_invoice_file_pathname);
                        String dup_invoice_file_pathname = Config.SAP_INVOICES_PATH + file_name.replace("pdf", "dup");
                        File dup_file = new File(dup_invoice_file_pathname);
                        String prn_file_pathname = Config.PRN_FILES_PATH + file_name.replace("pdf", "prn");
                        File prn_file = new File(prn_file_pathname);
                        String prn_sen_file_pathname = Config.PRN_FILES_PATH + file_name.replace("pdf", "sen");
                        File prn_sen_file = new File(prn_sen_file_pathname);

                        //Check if seen file exists
                        if (sen_file.exists() == false) {
                            //Check for dup file
                            if (dup_file.exists()) {
                                sen_file = dup_file;
                            } else {
                                missing_files.add(file_name);
                            }
                        } else {
                            if (dup_file.exists()) {
                                //Delete duplicate file
                                if (dup_file.delete() == false) {
                                    reprocess_status.setText("Failed to delete duplicate for (" + file_name + ")");
                                    reprocess_status.setForeground(Color.red);
                                }
                            }
                        }

                        //Check if prn files exist & delete them
                        if (prn_file.exists()) {
                            //Delete it
                            if (prn_file.delete() == false) {
                                reprocess_status.setText("Failed to delete prn for (" + file_name + ")");
                                reprocess_status.setForeground(Color.red);
                            }
                        } else {
                            if (prn_sen_file.exists()) {
                                if (prn_sen_file.delete() == false) {
                                    reprocess_status.setText("Failed to delete seen prn for (" + file_name + ")");
                                    reprocess_status.setForeground(Color.red);
                                }
                            }
                        }

                        //Rename seen invoice file
                        if (sen_file.renameTo(pdf_file) == false) {
                            reprocess_status.setText("Failed to rename (" + file_name + ")");
                            reprocess_status.setForeground(Color.red);
                        } else {
                            renaming_count++;
                        }
                    }

                    //Reduce the progress counters
                    if (BackgroundWorker.total_sap_invoices_received > 0) {
                        BackgroundWorker.total_sap_invoices_received -= renaming_count;
                    }
                    if (BackgroundWorker.total_prn_files_created > 0) {
                        BackgroundWorker.total_prn_files_created -= renaming_count;
                    }
                    if (BackgroundWorker.total_html_receipts_received > 0) {
                        BackgroundWorker.total_html_receipts_received -= renaming_count;
                    }
                    if (BackgroundWorker.total_sap_invoices_signed > 0) {
                        BackgroundWorker.total_sap_invoices_signed -= renaming_count;
                    }
                    if (BackgroundWorker.total_signed_invoices_sent > 0) {
                        BackgroundWorker.total_signed_invoices_sent -= renaming_count;
                    }

                    //Resume the monitoring process
                    monitor_progress = true;
                    //Enable the process_again btn
                    process_again.setEnabled(true);

                    if (missing_files.size() > 0) {
                        missing_files_file = "missing_invoices.txt";
                        if (write_missing_files(missing_files_file, missing_files)) {
                            reprocess_status.setText(missing_files.size() + " invoice files missing...");
                            reprocess_status.setForeground(Color.red);
                            //view_missing_files_list.setVisible(true);
                        } else {
                            reprocess_status.setText("Failed to save " + missing_files.size() + " missing files...");
                            reprocess_status.setForeground(Color.red);
                            view_missing_files_list.setVisible(false);
                        }

                    }
                } else {
                    reprocess_status.setText("Failed to delete error invoices.");
                    reprocess_status.setForeground(Color.red);
                }
            } else {
                reprocess_status.setText("No error invoices to re-process");
            }
        }

        boolean write_missing_files(String file_name, ArrayList<String> missing_files) {
            PrintWriter writer = null;
            try {
                writer = new PrintWriter(Config.SAP_INVOICES_PATH + file_name + ".txt", "UTF-8");
                for (int i = 0; i < missing_files.size(); i++) {
                    writer.println(missing_files.get(i));
                }
                writer.close();
                return true;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(PRNGenerator.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(PRNGenerator.class.getName()).log(Level.SEVERE, null, ex);
                return false;
            } finally {
                writer.close();
            }

        }

    }

    class OpenMissingFilesListListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (Desktop.isDesktopSupported()) {
                if (missing_files_file != null) {
                    File file = new File(Config.SAP_INVOICES_PATH + missing_files_file);
                    try {
                        Desktop.getDesktop().edit(file);
                    } catch (IOException ex) {
                        Logger.getLogger(AutoModeMonitor.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
            } else {

            }
        }

        void open_file(File file) {
            ProcessBuilder pb = new ProcessBuilder("Notepad.exe", Config.SAP_INVOICES_PATH + missing_files_file);
            try {
                pb.start();
            } catch (IOException ex) {
                Logger.getLogger(AutoModeMonitor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    class StatusMonitorThread implements Runnable {

        @Override
        public void run() {
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    monitor_progress();
                }
            });

        }

    }

    class MonitorTask extends TimerTask {

        @Override
        public void run() {
            if (monitor_progress == true) {
                monitor_progress();
            }

            //Check app license
            if (time_lapsed == 0 || time_lapsed >= half_an_hour) {
                //Check app licence
                check_licence();
                //Reset time_lapsed
                time_lapsed = 3000;
            }
            time_lapsed += 3000;

        }

    }

    void check_licence() {
        //Get licensing info
        Config.CURRENT_MACHINE_INFO = SystemInit.get_system_info();
        if (Config.CURRENT_MACHINE_INFO != null && Config.CURRENT_MACHINE_INFO.size() > 0) {
            //Read the saved machine info
            Config.SAVED_MACHINE_INFO = (HashMap<String, String>) SystemInit.deserialize_object_from_file("aclin");
            if (Config.SAVED_MACHINE_INFO != null && Config.SAVED_MACHINE_INFO.size() > 0) {
                //Compare the parameters
                if (Config.CURRENT_MACHINE_INFO.get("OS_Type").equals(Config.SAVED_MACHINE_INFO.get("OS_Type"))) {
                    if (Config.CURRENT_MACHINE_INFO.get("UUID").equals(Config.SAVED_MACHINE_INFO.get("UUID"))) {
                        //Same machine detected, check the license expiry status
                        LocalDate current_date = SystemInit.string_to_localdate(Config.CURRENT_MACHINE_INFO.get("CURRENT_DATE"));
                        LocalDate expiry_date = SystemInit.string_to_localdate(Config.SAVED_MACHINE_INFO.get("DATE_OF_EXPIRY"));
                        LocalDate reminder_date = SystemInit.string_to_localdate(Config.SAVED_MACHINE_INFO.get("DATE_OF_REMINDER"));

                        //Temporary code, to test license expiry
                        //expiry_date = current_date;
                        //current_date = current_date.plusDays(1);
                        //System.out.println(TAG + ", expiry_date: " + expiry_date + " current_date: " + current_date);
                        //End temporary code
                        int result = expiry_date.compareTo(current_date);
                        long days = DAYS.between(current_date, expiry_date);
                        if (result < 0) {
                            System.out.println(days + " days after exiry date..");
                            //Deactivate app at server
                            if (deactivate_license(Config.SAVED_MACHINE_INFO.get("UUID"))) {
                                Main.run_in_manual_mode(1);
                            } else {
                                System.out.println(TAG + ", failed to deactivate expired license...");
                            }
                        } else if (result > 0) {
                            //Temporary code, to send a test reminder
                            //long days_to_remind = DAYS.between(current_date, reminder_date);
                            //System.out.println(TAG + ", days_to_remind: " + days_to_remind);
                            //reminder_date = reminder_date.minusDays(days_to_remind);
                            //System.out.println(TAG + ", reminder_date: " + reminder_date + " current_date: " + current_date);
                            //End temporary code

                            System.out.println(days + " days before exiry date..");
                            if (check_if_today_is_reminder_date(reminder_date, current_date)) {
                                System.out.println(TAG + ", today is reminder date...");
                                //Send reminder
                                String subject = "License Renewal Reminder";
                                String body = "Your license subscription for this (Invoice Processing System) application expires on (" + expiry_date + ").\nPlease contact " + Config.SALES_ADDRESS + " to make arrangements for the renewal.\n\nKind Regards, Support.";
                                String sending_status = SendMail.send_with_tls(Config.ADMIN_ADDRESS, subject, body, null, null);
                                if (sending_status.equalsIgnoreCase("success")) {
                                    time_lapsed = 0;
                                    System.out.println(TAG + ", License subscription reminder sent to: " + Config.ADMIN_ADDRESS);
                                } else {
                                    System.out.println(TAG + ", Failed to send license subscription reminder to: " + Config.ADMIN_ADDRESS);
                                }
                            }
                        } else if (result == 0) {
                            System.out.println("Now is exiry date..");
                        }

                        if (Config.SAVED_MACHINE_INFO.get("Status").equalsIgnoreCase("registered active")) {
                            //Run app in normal mode
                            Config.LICENCE_MODE = 1;
                        } else {
                            //App needs activation
                            Config.LICENCE_MODE = 0;
                            Main.run_in_manual_mode(1);
                        }

                    } else {
                        //Different UUID detected from activated type i.e re-installation detected with same OS type
                        System.out.println("OS re-installation detected.");
                        //Set activation status
                        //Config.CURRENT_MACHINE_INFO.put("Status", "inactive");
                        //Read and save this machines' details
                        if (SystemInit.serialize_object_to_file("aclin", Config.CURRENT_MACHINE_INFO)) {
                            System.out.println("Re-installation licence info saved.");
                            System.out.println(Config.CURRENT_MACHINE_INFO);
                            //Assign the current info to the saved info map
                            Config.SAVED_MACHINE_INFO = Config.CURRENT_MACHINE_INFO;
                            //Show license verification/activation screen
                            Config.LICENCE_MODE = 2;
                            Main.run_in_manual_mode(1);
                        } else {
                            System.out.println("Failed to save re-installation licence info.");
                        }
                    }
                } else {
                    //Different OS detected from activated type i.e new installation detected
                    System.out.println("Different OS detected from activated type.");
                    //Set activation status
                    Config.CURRENT_MACHINE_INFO.put("Status", "inactive");
                    //Read and save this machines' details
                    if (SystemInit.serialize_object_to_file("aclin", Config.CURRENT_MACHINE_INFO)) {
                        System.out.println("Fresh installation licence info saved.");
                        System.out.println(Config.CURRENT_MACHINE_INFO);
                        //Assign the current info to the saved info map
                        Config.SAVED_MACHINE_INFO = Config.CURRENT_MACHINE_INFO;
                        //Show license verification/activation screen
                        Config.LICENCE_MODE = 3;
                        Main.run_in_manual_mode(1);
                    } else {
                        System.out.println("Failed to save fresh installation licence info.");

                    }
                }
            } else {
                //Failed to read current machine info i.e new installation detected
                System.out.println("Failed to read saved machine info.");
                //Set activation status
                Config.CURRENT_MACHINE_INFO.put("Status", "inactive");
                //Read and save this machines' details
                if (SystemInit.serialize_object_to_file("aclin", Config.CURRENT_MACHINE_INFO)) {
                    System.out.println("New installation licence info saved.");
                    System.out.println(Config.CURRENT_MACHINE_INFO);
                    //Assign the current info to the saved info map
                    Config.SAVED_MACHINE_INFO = Config.CURRENT_MACHINE_INFO;
                    //Show license verification/activation screen
                    Config.LICENCE_MODE = 4;
                    Main.run_in_manual_mode(1);
                } else {
                    System.out.println("Failed to save new installation licence info.");
                }
            }
        } else {
            //Failed to read current machine info
            System.out.println("Failed to read current machine info.");
            Config.LICENCE_MODE = 5;
            Main.run_in_manual_mode(1);
        }
    }

    boolean check_if_today_is_reminder_date(LocalDate reminder_date, LocalDate current_date) {
        //Check if today is reminder date
        if (reminder_date.compareTo(current_date) == 0) {
            //Send reminder
            return true;
        } else {
            return false;
        }
    }

    boolean deactivate_license(String UUID) {
        boolean deactivate_status = false;
        Map<String, Object> params = new LinkedHashMap<>();
        params.put("UUID", UUID);

        ExecutorService executor = Executors.newFixedThreadPool(2);
        Future<JSONObject> response = executor.submit(new NetworkManager("deactivate_user.php", params));
        //Check & wait for response
        boolean response_received = false;
        int trial_attempts = 0;
        while (!response_received && trial_attempts < 6) {
            try {
                JSONObject responseObj = response.get(3, TimeUnit.SECONDS);
                //Reset response_received
                response_received = true;
                //Process response
                if (responseObj != null) {
                    System.out.println(TAG + ", response: " + responseObj);
                    long status = (Long) responseObj.get("status");
                    String msg = (String) responseObj.get("msg");
                    if (status == 1) {
                        //Set app registered not active
                        Config.SAVED_MACHINE_INFO.put("Status", "registered not active");
                        if (SystemInit.serialize_object_to_file("aclin", Config.SAVED_MACHINE_INFO)) {
                            deactivate_status = true;
                        } else {
                            System.out.println(TAG + ", failed to save new license params.");
                            deactivate_status = false;
                        }

                    } else {
                        System.out.println(TAG + ", failed to deactivate the expired app license.");
                        deactivate_status = false;
                    }
                } else {
                    System.out.println(TAG + ", Failed to connect to activation server.");
                    deactivate_status = false;
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(AutoModeMonitor.class.getName()).log(Level.SEVERE, null, ex);
                deactivate_status = false;
            } catch (ExecutionException ex) {
                Logger.getLogger(AutoModeMonitor.class.getName()).log(Level.SEVERE, null, ex);
                deactivate_status = false;
            } catch (TimeoutException ex) {
                try {
                    Thread.sleep(3000);
                    trial_attempts++;
                } catch (InterruptedException ex1) {
                    Logger.getLogger(AutoModeMonitor.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        return deactivate_status;
    }
}
