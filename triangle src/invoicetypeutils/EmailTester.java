/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package invoicetypeutils;

import app.Config;
import dbutils.DbManager;
import emailutils.SendMail;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Tinashe
 */
public class EmailTester extends javax.swing.JPanel {

    /**
     * Creates new form EmailTester
     */
    public EmailTester() {
        initComponents();

        initTables();

        show_outbox_btn.addActionListener(new OutboxListener());
        send_email_btn.addActionListener(new SendInvoiceListener());

        //create the thread pool executor service
        this.executor = Executors.newFixedThreadPool(10);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        outboxScrollpane = new javax.swing.JScrollPane();
        emailsTable = new javax.swing.JTable();
        show_outbox_btn = new javax.swing.JButton();
        show_sent_emails_tn = new javax.swing.JButton();
        send_email_btn = new javax.swing.JButton();
        send_status = new javax.swing.JLabel();
        db_update_status = new javax.swing.JLabel();

        outboxScrollpane.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N

        emailsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        outboxScrollpane.setViewportView(emailsTable);

        show_outbox_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        show_outbox_btn.setText("Outbox");

        show_sent_emails_tn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        show_sent_emails_tn.setText("Sent");

        send_email_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        send_email_btn.setText("Send Invoice");

        send_status.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        send_status.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        send_status.setText("-");

        db_update_status.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        db_update_status.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        db_update_status.setText("-");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(send_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(send_email_btn)
                    .addComponent(outboxScrollpane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(show_outbox_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(show_sent_emails_tn))
                    .addComponent(db_update_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(336, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(show_outbox_btn)
                    .addComponent(show_sent_emails_tn))
                .addGap(18, 18, 18)
                .addComponent(outboxScrollpane, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(send_email_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(send_status)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(db_update_status)
                .addContainerGap(143, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel db_update_status;
    private static javax.swing.JTable emailsTable;
    private static javax.swing.JScrollPane outboxScrollpane;
    private static javax.swing.JButton send_email_btn;
    private static javax.swing.JLabel send_status;
    private static javax.swing.JButton show_outbox_btn;
    private static javax.swing.JButton show_sent_emails_tn;
    // End of variables declaration//GEN-END:variables
    HashMap<String, ArrayList<String>> outbox;
    DefaultTableModel outboxTableModel = new DefaultTableModel(0, 3);
    String TAG = "EmailTester";
    public static ExecutorService executor = null;

    void initTables() {
        emailsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // add header of the table
        String header[] = new String[]{"Invoice Name", "Recepient", "Submitted"};
        outboxTableModel.setColumnIdentifiers(header);
        emailsTable.setModel(outboxTableModel);
        resizeColumnWidth(emailsTable);

    }

    void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 15; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    class OutboxListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            //Get the pending emails from db
            DbManager db_manager = new DbManager();
            //Check
            outbox = db_manager.get_unsent_invoices();
            if (outbox != null && outbox.size() > 0) {
                //Pending emails found, display in table
                send_status.setText(outbox.size() + " pending emails found.");
                for (Object key : outbox.keySet()) {
                    String invoice_name = (String) key;
                    ArrayList<String> invoice_data_array = outbox.get(key);
                    String recepient = invoice_data_array.get(2);
                    String submitted = "not set";
                    outboxTableModel.addRow(new String[]{invoice_name, recepient, submitted});
                    resizeColumnWidth(emailsTable);
                }

            } else {
                //Pending emails not found
                send_status.setText("No pending emails found.");
                send_status.setForeground(Color.black);
                db_update_status.setForeground(Color.black);
            }
        }

    }

    class SendInvoiceListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            int rowIndex = emailsTable.getSelectedRow();
            //Get the field name selected
            String invoice_name = (String) emailsTable.getValueAt(rowIndex, 0);
            String recepient = (String) emailsTable.getValueAt(rowIndex, 1);
            //Check if recepient is not empty
            recepient = recepient.trim();
            System.out.println(TAG + ", recepient: " + recepient);
            if (recepient != null && recepient.length() > 0 && !recepient.equalsIgnoreCase("no set")) {
                //Check if email is properly struvtured
                int index_of_opening_square_brackets = recepient.indexOf('<');
                if (index_of_opening_square_brackets != -1) {
                    int index_of_closing_square_brackets = recepient.indexOf('>');
                    if (index_of_closing_square_brackets != -1) {
                        recepient = recepient.substring(index_of_opening_square_brackets + 1, index_of_closing_square_brackets);
                    } else {
                        recepient = recepient.substring(index_of_opening_square_brackets);
                    }
                }
            } else {
                System.out.println(TAG + ", Invoice: " + invoice_name + " recepient email is empty");
                recepient = Config.TEST_RECEPIENT;
            }
            
            send_email_btn.setEnabled(false);
            send_status.setText("Sending...please wait");

            //Submit the SendInvoiceTask to executor
            Future<Boolean> sending_response = executor.submit(new SendInvoiceTask(invoice_name, recepient));
            try {
                //Block & sending response
                boolean sending_status = sending_response.get();
                //Update the sent_status & progress in db
                int sent_status = 0;
                if (sending_status) {
                    String msg = invoice_name + ", sent successifully to: " + recepient;
                    System.out.println(TAG + ", invoice: " + invoice_name + ", sent successifully to: " + recepient);
                    send_status.setText(msg);
                    send_status.setForeground(Color.green);
                    sent_status = 1;
                } else {
                    String msg = "Failed to send " + invoice_name + ", to: " + recepient;
                    System.out.println(TAG + "Failed to send " + invoice_name + ", to: " + recepient);
                    send_status.setText(msg);
                    send_status.setForeground(Color.red);
                    sent_status = 0;
                }

                //Update invoice sent flag in db
                DbManager db_manager = new DbManager();
                if (db_manager.set_invoice_sent_status(invoice_name, sent_status)) {
                    //Remove from out hashmap
                    outbox.remove(invoice_name);
                    System.out.println(TAG + ", signed invoice: " + invoice_name + " sent status updated successfully.");
                    //Delete the sending failure log if it had been created
                    app.Logger log = new app.Logger();
                    log.deleteLog(invoice_name);
                    String msg = invoice_name + " sent status updated successfully.";
                    db_update_status.setText(msg);
                    db_update_status.setForeground(Color.green);
                } else {
                    System.out.println(TAG + ", failed to update sent status in db for: " + invoice_name);
                    String msg = invoice_name + " failed to update sent status in db for: " + invoice_name;
                    db_update_status.setText(msg);
                    db_update_status.setForeground(Color.red);
                }
                
                send_email_btn.setEnabled(true);
            

            } catch (InterruptedException ex) {
                Logger.getLogger(EmailTester.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                Logger.getLogger(EmailTester.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    class SendInvoiceTask implements Callable<Boolean> {

        String TAG = "SendInvoiceTask";
        String invoice_name = null, recepient = null;

        public SendInvoiceTask(String invoice_name, String recepient) {
            this.invoice_name = invoice_name;
            if (recepient != null) {
                this.recepient = recepient;
            } else {
                if (Config.TEST_RECEPIENT != null && !Config.TEST_RECEPIENT.equalsIgnoreCase("0")) {
                    this.recepient = Config.TEST_RECEPIENT;
                } else {
                    this.recepient = recepient;
                }
            }

        }

        @Override
        public Boolean call() throws Exception {
            if (invoice_name != null && recepient != null) {
                //Send email
                String subject = "Signed Invoice: " + invoice_name.replace(".pdf", "");
                String body = "Find attached signed invoice.";
                String file_path_name = Config.SIGNED_INVOICES_PATH + invoice_name;
                //String temporary_recepient = "radsys@mgi.co.zw";
                System.out.println(TAG + ", sending to: " + recepient);
                String sending_status = SendMail.send_with_tls(recepient, subject, body, invoice_name, file_path_name);
                if (sending_status.equalsIgnoreCase("success")) {
                    return true;
                } else {
                    return false;
                }
            } else {
                System.out.println(TAG + ", error sending invoice, either invoice_name or recepient are empty.");
                app.Logger log = new app.Logger();
                ArrayList<String> info_lines = new ArrayList();
                info_lines.add(TAG + ": failed to set signed status in db for invoiceerror sending invoice, either invoice_name or recepient are empty (" + invoice_name + ")");
                log.writeLog(invoice_name, info_lines);
                return false;
            }

        }

    }//End of SendInvoiceTask

}
