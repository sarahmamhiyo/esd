/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package invoicetypeutils;

import app.Config;
import app.SystemInit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import pdfutils.PdfManager;

/**
 *
 * @author Tinashe
 */
public class ManageInvoiceTypes extends javax.swing.JPanel {

    /**
     * Creates new form ManageInvoiceTypes
     */
    public ManageInvoiceTypes() {
        initComponents();

        save_invoice_type_btn.addActionListener(new SaveInvoiceTypeListener());
        add_type_btn.addActionListener(new AddInvoiceTypeListener());
        browse_templates_btn.addActionListener(new ChooseTemplateListener());
        add_tag_btn.addActionListener(new AddTagListener());
        delete_invoice_type_btn.addActionListener(new DeleteInvoiceTypeListener());
        delete_tag_btn.addActionListener(new DeleteTagListener());
        nextPage.addActionListener(new PaginationListener());
        prevPage.addActionListener(new PaginationListener());
        initInvoiceTypesCombo(0, null);
        invoiceTypesCombo.addItemListener(new InvoiceTypeSelectedListener());

        //Hide & disable type_name, add_type_btn
        type_name.setEnabled(false);
        add_type_btn.setEnabled(false);

        tag_name_txt_field.setEnabled(false);
        add_tag_btn.setEnabled(false);

        delete_tag_btn.setEnabled(false);
        delete_tag_btn.setVisible(false);

        save_invoice_type_btn.setEnabled(false);
        save_invoice_type_btn.setVisible(false);

        delete_invoice_type_btn.setEnabled(false);
        delete_invoice_type_btn.setVisible(false);

        prevPage.setEnabled(false);
        nextPage.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        invoiceTypesCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        type_name = new javax.swing.JTextField();
        add_type_btn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        tag_name_txt_field = new javax.swing.JTextField();
        add_tag_btn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        browse_templates_btn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tags_list = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        save_invoice_type_btn = new javax.swing.JButton();
        status_line = new javax.swing.JLabel();
        delete_invoice_type_btn = new javax.swing.JButton();
        delete_tag_btn = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        template_name = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        pagination_label = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        invoice_template_data_area = new javax.swing.JTextArea();
        nextPage = new javax.swing.JButton();
        prevPage = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Manage Invoice Types", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 0, 11))); // NOI18N
        setPreferredSize(new java.awt.Dimension(1000, 530));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Invoice Parameters", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 0, 11))); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(500, 524));

        invoiceTypesCombo.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel1.setText("Invoice Type Name:");

        type_name.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N

        add_type_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        add_type_btn.setText("Add Type");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel2.setText("Invoice Tag Name:");

        tag_name_txt_field.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N

        add_tag_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        add_tag_btn.setText("Add Tag>>");

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel3.setText("Open Template:");

        browse_templates_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        browse_templates_btn.setText("Browse..");

        tags_list.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jScrollPane1.setViewportView(tags_list);

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel4.setText("Invoice Tags:");

        save_invoice_type_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        save_invoice_type_btn.setText("Save Invoice Type");

        status_line.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        status_line.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        status_line.setText("-");

        delete_invoice_type_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        delete_invoice_type_btn.setText("Delete Invoice Type");

        delete_tag_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        delete_tag_btn.setText("<<Delete Tag");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(status_line, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(invoiceTypesCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tag_name_txt_field))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(type_name)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(browse_templates_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(delete_tag_btn)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(add_type_btn, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(add_tag_btn, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(delete_invoice_type_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(save_invoice_type_btn)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(invoiceTypesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(type_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add_type_btn)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tag_name_txt_field, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(add_tag_btn))
                    .addComponent(browse_templates_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(65, 65, 65)
                        .addComponent(delete_tag_btn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save_invoice_type_btn)
                    .addComponent(delete_invoice_type_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status_line)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sample Invoice Preview", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 0, 11))); // NOI18N
        jPanel2.setPreferredSize(new java.awt.Dimension(500, 59));

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel5.setText("File name:");

        template_name.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        template_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        template_name.setText("-");

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel6.setText("Page:");

        pagination_label.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        pagination_label.setText("-");

        invoice_template_data_area.setColumns(20);
        invoice_template_data_area.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        invoice_template_data_area.setRows(5);
        jScrollPane2.setViewportView(invoice_template_data_area);

        nextPage.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        nextPage.setText(">>");

        prevPage.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        prevPage.setText("<<");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(prevPage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(template_name, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pagination_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextPage)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(template_name)
                    .addComponent(nextPage)
                    .addComponent(prevPage))
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(pagination_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton add_tag_btn;
    private static javax.swing.JButton add_type_btn;
    private static javax.swing.JButton browse_templates_btn;
    private static javax.swing.JButton delete_invoice_type_btn;
    private static javax.swing.JButton delete_tag_btn;
    private static javax.swing.JComboBox invoiceTypesCombo;
    private static javax.swing.JTextArea invoice_template_data_area;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JButton nextPage;
    private static javax.swing.JLabel pagination_label;
    private static javax.swing.JButton prevPage;
    private static javax.swing.JButton save_invoice_type_btn;
    private static javax.swing.JLabel status_line;
    private static javax.swing.JTextField tag_name_txt_field;
    private static javax.swing.JList tags_list;
    private static javax.swing.JLabel template_name;
    private static javax.swing.JTextField type_name;
    // End of variables declaration//GEN-END:variables

    String current_invoice_type = null;
    DefaultListModel tagsListModel = new DefaultListModel();
    String selected_file_path = null;
    int page_count = 0, current_page = 0;

    void initInvoiceTypesCombo(int selected_index, String item_selected) {
        //Empty invoiceTypesCombo
        invoiceTypesCombo.removeAllItems();
        invoiceTypesCombo.addItem("Select an invoice type..");
        if (Config.INVOICE_TYPES != null) {
            for (int i = 0; i < Config.INVOICE_TYPES.size(); i++) {
                invoiceTypesCombo.addItem(Config.INVOICE_TYPES.get(i));
            }
        }
        invoiceTypesCombo.addItem("Add new ..");

        if (selected_index > 0) {
            invoiceTypesCombo.setSelectedItem(item_selected);
        }
    }

    class InvoiceTypeSelectedListener implements ItemListener {

        @Override
        public void itemStateChanged(ItemEvent e) {
            int selected_index = invoiceTypesCombo.getSelectedIndex();
            if (selected_index > 0) {
                String item_selected = invoiceTypesCombo.getSelectedItem().toString();
                if (!item_selected.equalsIgnoreCase("Add new ..")) {
                    current_invoice_type = item_selected;
                    //Enable tag fields
                    tag_name_txt_field.setEnabled(true);
                    add_tag_btn.setEnabled(true);
                    tag_name_txt_field.requestFocus();
                    //Display the existing tags for this invoice
                    boolean load_status = loadSelectedInvoiceTypeTags(current_invoice_type);
                    if (load_status) {
                        //Enable option to delete tags
                        delete_tag_btn.setEnabled(true);
                        delete_tag_btn.setVisible(true);
                    }
                    //Enable the option to delete this invoice type
                    delete_invoice_type_btn.setEnabled(true);
                    delete_invoice_type_btn.setVisible(true);

                } else {
                    //Unhide & enable type_name, add_type_btn
                    type_name.setEnabled(true);
                    add_type_btn.setEnabled(true);

                    //Empty the tags_list
                    empty_tags_list();
                    //Disable the option to delete an invoice type
                    delete_invoice_type_btn.setEnabled(false);
                    delete_invoice_type_btn.setVisible(false);

                }
            } else {
                //Hide & disable type_name, add_type_btn
                type_name.setEnabled(false);
                add_type_btn.setEnabled(false);
                //Disable tag fields
                tag_name_txt_field.setEnabled(false);
                add_tag_btn.setEnabled(false);
                //Empty the tags_list
                empty_tags_list();
                //Disable the option to delete an invoice type
                delete_invoice_type_btn.setEnabled(false);
                delete_invoice_type_btn.setVisible(false);
                //Disable option to save or update an invoice type
                save_invoice_type_btn.setEnabled(false);
                save_invoice_type_btn.setVisible(false);
                //Clear the status line
                status_line.setText("-");
                //Reset current_invoice_type to null
                current_invoice_type = null;
            }
        }

        boolean loadSelectedInvoiceTypeTags(String current_invoice_type) {
            if (Config.INVOICE_TAGS != null) {
                if (Config.INVOICE_TAGS.containsKey(current_invoice_type)) {
                    ArrayList<String> invoice_tags = Config.INVOICE_TAGS.get(current_invoice_type);
                    empty_tags_list();
                    if (invoice_tags != null && invoice_tags.size() > 0) {
                        for (int i = 0; i < invoice_tags.size(); i++) {
                            tagsListModel.addElement(invoice_tags.get(i));
                        }
                        tags_list.setModel(tagsListModel);
                        return true;
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }
            } else {
                return false;
            }
        }

        void empty_tags_list() {
            tagsListModel.removeAllElements();
        }

    }

    class ChooseTemplateListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            //Reset flags
            selected_file_path = null;
            page_count = 0;
            current_page = 0;

            JFileChooser jfc = new JFileChooser();
            jfc.setCurrentDirectory(new File("."));
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            jfc.setDialogTitle("Select an invoice template.");
            jfc.setAcceptAllFileFilterUsed(false);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("PDF", "pdf");
            jfc.addChoosableFileFilter(filter);

            int returnValue = jfc.showOpenDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                selected_file_path = jfc.getSelectedFile().getPath();
                String selected_file_name = jfc.getName(new File(selected_file_path));
                System.out.println(selected_file_path);
                System.out.println("selected_file_name: " + selected_file_name);

                template_name.setText(selected_file_name);

                //Read the template
                read_invoice_data(selected_file_path);
            }
        }

    }

    void read_invoice_data(String file_path_name) {
        //Get page count for this file
        PdfManager pdf_manager = new PdfManager();
        page_count = pdf_manager.get_number_of_pages(file_path_name);
        if (page_count > 0) {
            //Read the first page text
            current_page = 1;
            String pageText = pdf_manager.get_page_text(current_page, file_path_name);
            if (pageText != null) {
                //Display the text
                invoice_template_data_area.setText(pageText);
                //set pagination info
                pagination_label.setText(current_page + " of " + page_count);
                //Set pagination btns
                if (page_count > current_page) {
                    prevPage.setEnabled(false);
                    nextPage.setEnabled(true);
                } else {
                    prevPage.setEnabled(false);
                    nextPage.setEnabled(false);
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageInvoiceTypes.this,
                        "Failed to get page 1 text for this file!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(
                    ManageInvoiceTypes.this,
                    "Failed to get page count for this file!!",
                    "Alert",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    class PaginationListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (selected_file_path != null) {
                if (e.getSource() == nextPage) {
                    //Increment current_page 
                    current_page++;
                    if (current_page <= page_count) {
                        //Read the current_page
                        read_page();
                    }
                } else if (e.getSource() == prevPage) {
                    //Increment current_page 
                    current_page--;
                    if (current_page > 0) {
                        //Read the current_page
                        read_page();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageInvoiceTypes.this,
                        "Choose an invoice template file first!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        }

        void read_page() {
            PdfManager pdf_manager = new PdfManager();
            String pageText = pdf_manager.get_page_text(current_page, selected_file_path);
            if (pageText != null) {
                //Display the text
                invoice_template_data_area.setText(pageText);
                //set pagination info
                pagination_label.setText(current_page + " of " + page_count);
                //Set pagination next btn
                if (page_count > current_page) {
                    nextPage.setEnabled(true);
                } else {
                    nextPage.setEnabled(false);
                }

                //Set pagination prev btn
                if (current_page > 1) {
                    prevPage.setEnabled(true);
                } else {
                    prevPage.setEnabled(false);
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageInvoiceTypes.this,
                        "Failed to read page " + current_page + " of this file!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        }

    }

    class AddInvoiceTypeListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            String invoice_type = type_name.getText().toString();
            if (invoice_type != null && !invoice_type.equalsIgnoreCase("")) {
                //Add this type to Config.INVOICE_TYPES
                if (Config.INVOICE_TYPES == null) {
                    Config.INVOICE_TYPES = new ArrayList();
                }

                if (!Config.INVOICE_TYPES.contains(invoice_type)) {
                    Config.INVOICE_TYPES.add(invoice_type);
                    current_invoice_type = invoice_type;
                    //Enable tag fields
                    tag_name_txt_field.setEnabled(true);
                    add_tag_btn.setEnabled(true);
                    type_name.setText("");
                    status_line.setText("Invoice type added successfully.");
                    //Add this invoice type to invoiceTypesCombo
                    initInvoiceTypesCombo(1, current_invoice_type);
                } else {
                    JOptionPane.showMessageDialog(
                            ManageInvoiceTypes.this,
                            "This invoice type name already exists!!",
                            "Alert",
                            JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageInvoiceTypes.this,
                        "Enter invoice type name first!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        }

    }

    class AddTagListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            String tag_name = (String) tag_name_txt_field.getText();
            if (tag_name != null && !tag_name.equalsIgnoreCase("")) {
                if (current_invoice_type != null) {
                    if (Config.INVOICE_TAGS == null) {
                        Config.INVOICE_TAGS = new HashMap();
                    }

                    if (Config.INVOICE_TAGS.containsKey(current_invoice_type)) {
                        //Update the existing invoice tags
                        ArrayList<String> tags_array = Config.INVOICE_TAGS.get(current_invoice_type);
                        if (!tags_array.contains(tag_name)) {
                            tags_array.add(tag_name);
                            Config.INVOICE_TAGS.put(current_invoice_type, tags_array);
                            //Display on list
                            add_to_tagslist(tag_name);
                            //Enable the option to save this invoice type
                            save_invoice_type_btn.setEnabled(true);
                            save_invoice_type_btn.setVisible(true);
                        } else {
                            JOptionPane.showMessageDialog(
                                    ManageInvoiceTypes.this,
                                    "This tag already exists for this invoice type!!",
                                    "Alert",
                                    JOptionPane.WARNING_MESSAGE);
                        }
                    } else {
                        //add new invoice tags
                        ArrayList<String> tags_array = new ArrayList();
                        tags_array.add(tag_name);
                        Config.INVOICE_TAGS.put(current_invoice_type, tags_array);
                        //Display on list
                        add_to_tagslist(tag_name);
                        //Enable the option to save this invoice type
                        save_invoice_type_btn.setEnabled(true);
                        save_invoice_type_btn.setVisible(true);
                    }

                    //Clear the tag_name_txt_field 
                    tag_name_txt_field.setText("");
                    tag_name_txt_field.requestFocus();

                } else {
                    JOptionPane.showMessageDialog(
                            ManageInvoiceTypes.this,
                            "Select or enter an invoice type name first!!",
                            "Alert",
                            JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageInvoiceTypes.this,
                        "Enter a tag name first!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        }

        void add_to_tagslist(String tag_name) {
            tagsListModel.addElement(tag_name);

            tags_list.setModel(tagsListModel);
        }

    }

    class DeleteTagListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (Config.INVOICE_TYPES != null) {
                if (Config.INVOICE_TAGS.containsKey(current_invoice_type)) {
                    //Get the tags for this invoice
                    ArrayList<String> invoice_tags = Config.INVOICE_TAGS.get(current_invoice_type);
                    //Remove the tag
                    int index = tags_list.getSelectedIndex();
                    String tag = (String) tagsListModel.get(index);
                    invoice_tags.remove(tag);
                    //Replace invoice_tags
                    Config.INVOICE_TAGS.put(current_invoice_type, invoice_tags);
                    //Save the Config.INVOICE_TAGS
                    boolean save_status = SystemInit.serialize_object_to_file("invoice_type_tags", Config.INVOICE_TAGS);
                    if (save_status) {
                        //Delete tag from list

                        tagsListModel.remove(index);
                        int size = tagsListModel.getSize();
                        if (size == 0) { //Nobody's left, disable firing.
                            delete_tag_btn.setEnabled(false);
                            delete_tag_btn.setVisible(false);
                        } else { //Select an index.
                            if (index == tagsListModel.getSize()) {
                                //removed item in last position
                                index--;
                            }

                            tags_list.setSelectedIndex(index);
                            tags_list.ensureIndexIsVisible(index);
                        }
                    } else {
                        JOptionPane.showMessageDialog(
                                ManageInvoiceTypes.this,
                                "Failed to update invoice tags!!",
                                "Alert",
                                JOptionPane.WARNING_MESSAGE);
                    }

                }
            }
        }

    }

    class SaveInvoiceTypeListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            String invoice_type = type_name.getText().toString();
            if ((invoice_type != null && !invoice_type.equalsIgnoreCase("")) || current_invoice_type != null) {
                if (current_invoice_type == null) {
                    current_invoice_type = invoice_type;
                }
                //Add this type to Config.INVOICE_TYPES
                if (Config.INVOICE_TYPES == null) {
                    Config.INVOICE_TYPES = new ArrayList();
                }

                if (!Config.INVOICE_TYPES.contains(current_invoice_type)) {
                    Config.INVOICE_TYPES.add(current_invoice_type);
                }
                //Serialize the Config.INVOICE_TYPES ti file
                boolean save_status = SystemInit.serialize_object_to_file("invoice_types", Config.INVOICE_TYPES);
                if (save_status) {
                    //Save invoice tags
                    save_status = SystemInit.serialize_object_to_file("invoice_type_tags", Config.INVOICE_TAGS);
                    if (save_status) {
                        type_name.setText("");
                        status_line.setText("Invoice type saved successfully.");
                    } else {
                        status_line.setText("Failed to save invoice type tags.");
                    }
                } else {
                    status_line.setText("Failed to save invoice type.");
                }

            } else {
                JOptionPane.showMessageDialog(
                        ManageInvoiceTypes.this,
                        "Enter invoice type name first!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        }

    }

    class DeleteInvoiceTypeListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (current_invoice_type != null) {
                //Remove this type from invoice types & tags
                Config.INVOICE_TAGS.remove(current_invoice_type);
                Config.INVOICE_TYPES.remove(current_invoice_type);
                //Save the new invoice types & tags
                boolean save_status = SystemInit.serialize_object_to_file("invoice_types", Config.INVOICE_TYPES);
                if (save_status) {
                    save_status = SystemInit.serialize_object_to_file("invoice_type_tags", Config.INVOICE_TAGS);
                    if (save_status) {
                        //Remove the invoice type for invoiceTypesCombo
                        invoiceTypesCombo.removeItem(current_invoice_type);
                        invoiceTypesCombo.setSelectedIndex(0);
                        type_name.setText("");
                        status_line.setText("Invoice type deleted successfully.");
                    } else {
                        JOptionPane.showMessageDialog(
                                ManageInvoiceTypes.this,
                                "Failed to update invoice type tags!!",
                                "Alert",
                                JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(
                            ManageInvoiceTypes.this,
                            "Failed to update invoice types!!",
                            "Alert",
                            JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageInvoiceTypes.this,
                        "Select an invoice type name first!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        }

    }
}
