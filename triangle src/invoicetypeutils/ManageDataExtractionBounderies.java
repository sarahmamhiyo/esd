/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package invoicetypeutils;

import app.Config;
import app.SystemInit;
import dbutils.DbManager;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import pdfutils.DataExtractor;
import pdfutils.PRNGenerator;
import pdfutils.PdfManager;

/**
 *
 * @author Tinashe
 */
public class ManageDataExtractionBounderies extends javax.swing.JPanel {

    /**
     * Creates new form ManageDataExtractionBounderies
     */
    public ManageDataExtractionBounderies() {
        initComponents();

        invoiceTypesCombo.addActionListener(new SelectedInvoiceTypeListener());

        add_area_btn.addActionListener(new AddBounderyListener());
        delete_boundery_btn.addActionListener(new DeleteBounderyListener());
        save_bounderies_btn.addActionListener(new SaveBounderiesListener());
        open_template_btn.addActionListener(new OpenTemplateListener());
        nextPage.addActionListener(new PaginationListener());
        prevPage.addActionListener(new PaginationListener());
        extract_invoice_btn.addActionListener(new ExtractInvoiceDataListener());
        preparePRNData_btn.addActionListener(new GeneratePRNDataListener());
        genaratePRN_file_btn.addActionListener(new GeneratePRNFileListener());
        add_area_btn.setEnabled(false);
        save_bounderies_btn.setEnabled(false);
        delete_boundery_btn.setEnabled(false);
        delete_boundery_btn.setVisible(false);

        prevPage.setEnabled(false);
        nextPage.setEnabled(false);

        initInvoiceTypesCombo(0, null);

        initRequiredFieldsCombo();

        initBounderiesTable();

        initPRNDataTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        invoiceTypesCombo = new javax.swing.JComboBox();
        requireFieldsCombo = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        startTagsCombo = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        endTagsCombo = new javax.swing.JComboBox();
        add_area_btn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bounderiesTable = new javax.swing.JTable();
        save_bounderies_btn = new javax.swing.JButton();
        delete_boundery_btn = new javax.swing.JButton();
        invoice_type_label = new javax.swing.JLabel();
        status_line = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        fieldName = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        startTag = new javax.swing.JLabel();
        endTag = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        extracted_data_area_pane = new javax.swing.JScrollPane();
        extracted_data_area = new javax.swing.JTextArea();
        extract_invoice_btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        prn_data_area = new javax.swing.JTextArea();
        preparePRNData_btn = new javax.swing.JButton();
        duplicate_found_status = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        open_template_btn = new javax.swing.JButton();
        prevPage = new javax.swing.JButton();
        pagination_label = new javax.swing.JLabel();
        nextPage = new javax.swing.JButton();
        template_data_area = new javax.swing.JScrollPane();
        invoice_template_data_area = new javax.swing.JTextArea();
        template_name = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        prn_data_table = new javax.swing.JTable();
        genaratePRN_file_btn = new javax.swing.JButton();
        prn_file_status = new javax.swing.JLabel();

        setPreferredSize(new java.awt.Dimension(1000, 530));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Invoice Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 0, 11))); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(300, 512));

        invoiceTypesCombo.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N

        requireFieldsCombo.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel1.setText("Required Value:");

        jLabel2.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel2.setText("Start Tag:");

        startTagsCombo.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel3.setText("End Tag:");

        endTagsCombo.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N

        add_area_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        add_area_btn.setText("Add Area>>");

        jLabel4.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel4.setText("Data bounderies for:");

        bounderiesTable.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        bounderiesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Field Name", "Start Tag", "End Tag"
            }
        ));
        jScrollPane1.setViewportView(bounderiesTable);

        save_bounderies_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        save_bounderies_btn.setText("Save Bounderies");

        delete_boundery_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        delete_boundery_btn.setText("<<Delete Boundery");

        invoice_type_label.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        invoice_type_label.setText("-");

        status_line.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        status_line.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        status_line.setText("-");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invoiceTypesCombo, 0, 268, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(requireFieldsCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startTagsCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endTagsCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(invoice_type_label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(delete_boundery_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(save_bounderies_btn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(add_area_btn))
                    .addComponent(status_line, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(invoiceTypesCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requireFieldsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startTagsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endTagsCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add_area_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(invoice_type_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save_bounderies_btn)
                    .addComponent(delete_boundery_btn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status_line)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Template Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 0, 11))); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Extraction Test Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 0, 11))); // NOI18N

        jLabel5.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel5.setText("Field Name:");

        fieldName.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        fieldName.setText("-");

        jLabel6.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel6.setText("Start Tag:");

        startTag.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        startTag.setText("-");

        endTag.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        endTag.setText("-");

        jLabel7.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel7.setText("End Tag");

        jLabel8.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel8.setText("Data Extracted:");

        extracted_data_area.setColumns(20);
        extracted_data_area.setRows(5);
        extracted_data_area_pane.setViewportView(extracted_data_area);

        extract_invoice_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        extract_invoice_btn.setText("Extract Invoice Data");

        prn_data_area.setColumns(20);
        prn_data_area.setRows(5);
        jScrollPane2.setViewportView(prn_data_area);

        preparePRNData_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        preparePRNData_btn.setText("Prepare PRN Data");

        duplicate_found_status.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        duplicate_found_status.setText("-");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(startTag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endTag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(extracted_data_area_pane)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(extract_invoice_btn)
                            .addComponent(preparePRNData_btn))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(duplicate_found_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(fieldName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(startTag))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(endTag))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extracted_data_area_pane, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(extract_invoice_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(duplicate_found_status)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(preparePRNData_btn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Template Data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Trebuchet MS", 0, 11))); // NOI18N

        open_template_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        open_template_btn.setText("Open Template");

        prevPage.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        prevPage.setText("<<");

        pagination_label.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        pagination_label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pagination_label.setText("-");

        nextPage.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        nextPage.setText(">>");

        invoice_template_data_area.setColumns(20);
        invoice_template_data_area.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        invoice_template_data_area.setRows(5);
        template_data_area.setViewportView(invoice_template_data_area);

        template_name.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        template_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        template_name.setText("-");

        jLabel9.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        jLabel9.setText("PRN Data:");

        prn_data_table.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        prn_data_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(prn_data_table);

        genaratePRN_file_btn.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        genaratePRN_file_btn.setText("Generate PRN File");

        prn_file_status.setFont(new java.awt.Font("Trebuchet MS", 0, 11)); // NOI18N
        prn_file_status.setText("-");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(template_data_area, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(open_template_btn)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(prevPage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pagination_label, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nextPage)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(template_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(prn_file_status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genaratePRN_file_btn))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(open_template_btn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(template_name)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevPage)
                    .addComponent(pagination_label)
                    .addComponent(nextPage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(template_data_area, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(genaratePRN_file_btn)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(prn_file_status))))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JButton add_area_btn;
    private static javax.swing.JTable bounderiesTable;
    private static javax.swing.JButton delete_boundery_btn;
    private static javax.swing.JLabel duplicate_found_status;
    private static javax.swing.JLabel endTag;
    private static javax.swing.JComboBox endTagsCombo;
    private static javax.swing.JButton extract_invoice_btn;
    private static javax.swing.JTextArea extracted_data_area;
    private static javax.swing.JScrollPane extracted_data_area_pane;
    private static javax.swing.JLabel fieldName;
    private static javax.swing.JButton genaratePRN_file_btn;
    private static javax.swing.JComboBox invoiceTypesCombo;
    private static javax.swing.JTextArea invoice_template_data_area;
    private static javax.swing.JLabel invoice_type_label;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private static javax.swing.JButton nextPage;
    private static javax.swing.JButton open_template_btn;
    private static javax.swing.JLabel pagination_label;
    private static javax.swing.JButton preparePRNData_btn;
    private static javax.swing.JButton prevPage;
    private static javax.swing.JTextArea prn_data_area;
    private static javax.swing.JTable prn_data_table;
    private static javax.swing.JLabel prn_file_status;
    private static javax.swing.JComboBox requireFieldsCombo;
    private static javax.swing.JButton save_bounderies_btn;
    private static javax.swing.JLabel startTag;
    private static javax.swing.JComboBox startTagsCombo;
    private static javax.swing.JLabel status_line;
    private static javax.swing.JScrollPane template_data_area;
    private static javax.swing.JLabel template_name;
    // End of variables declaration//GEN-END:variables

    String selected_file_path = null;
    int page_count = 0, current_page = 0;
    DefaultTableModel bounderiesTableModel = new DefaultTableModel(0, 3);
    DefaultTableModel prnDataTableModel = new DefaultTableModel(0, 3);
    HashMap<String, String> invoice_data_values = null;
    String selected_invoice_type = null;
    HashMap<String, HashMap<Integer, ArrayList<String>>> prn_data = null;

    void initInvoiceTypesCombo(int selected_index, String item_selected) {
        //Empty invoiceTypesCombo
        invoiceTypesCombo.removeAllItems();
        invoiceTypesCombo.addItem("Select an invoice type..");
        if (Config.INVOICE_TYPES != null) {
            for (int i = 0; i < Config.INVOICE_TYPES.size(); i++) {
                invoiceTypesCombo.addItem(Config.INVOICE_TYPES.get(i));
            }
        }
        invoiceTypesCombo.addItem("Add new ..");

        if (selected_index > 0) {
            //invoiceTypesCombo.setSelectedItem(item_selected);
        }
    }

    void initRequiredFieldsCombo() {
        requireFieldsCombo.removeAllItems();
        requireFieldsCombo.addItem("Choose require field..");
        if (Config.REQUIRED_DATA_VALUES != null) {
            for (int i = 0; i < Config.REQUIRED_DATA_VALUES.size(); i++) {
                requireFieldsCombo.addItem(Config.REQUIRED_DATA_VALUES.get(i));
            }
        }
    }

    void initBounderiesTable() {
        bounderiesTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // add header of the table
        String header[] = new String[]{"Field Name", "Start Tag", "End Tag"};
        bounderiesTableModel.setColumnIdentifiers(header);
        bounderiesTable.setModel(bounderiesTableModel);
    }

    void initPRNDataTable() {
        prn_data_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        // add header of the table
        String header[] = new String[]{"Field Name", "Field Value", "Optional Value"};
        prnDataTableModel.setColumnIdentifiers(header);
        prn_data_table.setModel(prnDataTableModel);
    }

    class SelectedInvoiceTypeListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            //System.out.println("SelectedInvoiceTypeListener: " + e.getSource());
            //System.out.println(e.getItem() + " " + e.getStateChange());
            int selected_index = invoiceTypesCombo.getSelectedIndex();
            //System.out.println("SelectedInvoiceTypeListener selected_index: " + selected_index);

            if (selected_index > 0) {
                selected_invoice_type = invoiceTypesCombo.getSelectedItem().toString();
                invoice_type_label.setText(selected_invoice_type);
                //Load this invoice type's tags
                load_tags(selected_invoice_type);
                //Enable option to save a boundery
                add_area_btn.setEnabled(true);
                //Empty the bounderies table
                empty_bounderies_table();
                //Load the existing bounderies for this invoice type
                boolean load_status = load_existing_bounderies(selected_invoice_type);
                if (load_status) {
                    //Activate delete_boundery_btn & set visible
                    delete_boundery_btn.setEnabled(true);
                    delete_boundery_btn.setVisible(true);
                }
            } else {
                //Reset all the other fields
                startTagsCombo.removeAllItems();
                endTagsCombo.removeAllItems();
                //requireFieldsCombo.setSelectedIndex(0);
            }
        }

        boolean load_tags(String invoice_type) {
            //Empty the combos
            startTagsCombo.removeAllItems();
            endTagsCombo.removeAllItems();
            //Get the tags
            ArrayList<String> invoice_tags = Config.INVOICE_TAGS.get(invoice_type);
            if (invoice_tags != null) {
                //Load these tags into startTagsCombo & endTagsCombo
                startTagsCombo.addItem("Choose a start tag ..");
                endTagsCombo.addItem("Choose an end tag ..");
                for (int i = 0; i < invoice_tags.size(); i++) {
                    startTagsCombo.addItem(invoice_tags.get(i));
                    endTagsCombo.addItem(invoice_tags.get(i));
                }
                return true;
            } else {
                return false;
            }
        }

        boolean load_existing_bounderies(String selected_invoice_type) {
            //Get the invoice type object from Config.INVOICE_DATA_BOUNDERIES
            JSONObject invoice_type = (JSONObject) Config.INVOICE_DATA_BOUNDERIES.get(selected_invoice_type);

            if (invoice_type != null) {
                System.out.println("Existing bounderies for " + selected_invoice_type);
                System.out.println(invoice_type);
                //Loop thru getting the bounderies
                for (Object key : invoice_type.keySet()) {
                    JSONArray tags_array = (JSONArray) invoice_type.get(key);
                    String field_name = (String) key;
                    String start_tag = (String) tags_array.get(0);
                    String end_tag = (String) tags_array.get(1);
                    bounderiesTableModel.addRow(new String[]{field_name, start_tag, end_tag});
                }
                return true;
            } else {
                return false;
            }
        }

        void empty_bounderies_table() {
            int rowCount = bounderiesTableModel.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                bounderiesTableModel.removeRow(i);
            }
        }

    }

    class ExtractInvoiceDataListener implements ActionListener {

        String TAG = "ExtractInvoiceDataListener";
        String existing_duplicate_invoice_name = null;
        
        @Override
        public void actionPerformed(ActionEvent e) {
            //Check if any bounderies are available
            //if (Config.INVOICE_DATA_BOUNDERIES == null) {
            if (selected_file_path != null) {
                
                PRNGenerator prn_generator = new PRNGenerator();
                String file_name = new File(selected_file_path).getName();
                System.out.println(TAG + ", file_name: " + file_name);
                invoice_data_values = prn_generator.extract_invoice_data(file_name, page_count);
                if (invoice_data_values != null) {
                    //Display prn data
                    System.out.println(TAG + " invoice_data_values:");
                    System.out.println(invoice_data_values);
                    display_prn_data(invoice_data_values);

                    //Create the data for duplicate checking 
                    String invoice_to = (String) invoice_data_values.get("Invoice To");
                    invoice_to = invoice_to.trim();
                    String invoice_number = (String) invoice_data_values.get("Invoice Number");
                    invoice_number = invoice_number.trim();
                    String grand_total = (String) invoice_data_values.get("Grand Total");
                    grand_total = grand_total.trim();

                    HashMap<String, String> invoice_data = new HashMap();
                    //Get the invoice to
                    invoice_data.put("invoice_to", invoice_to);
                    //Get the invoice number
                    invoice_data.put("invoice_number", invoice_number);
                    //Get the Grand Total
                    invoice_data.put("grand_total", grand_total);
                    //Add file name
                    //invoice_data.put("file_name", file_name);
                    //Get the recepient 
                    String recepient = invoice_data_values.get("User Email");

                    //Check if duplicate invoice exists
                    if (check_for_duplicate_invoice_by_data(invoice_data) == false) {
                        //This is not a duplicate invoice, add it to sap_invoices_data in db
                        DbManager db_manager = new DbManager();
                        if (db_manager.insert_invoice_data(invoice_data)) {
                            duplicate_found_status.setText("New invoice data saved for: (" + file_name + ").");
                            duplicate_found_status.setForeground(Color.black);
                            //Allow user to create PRN or a new signed invoice
                            preparePRNData_btn.setEnabled(true);
                            genaratePRN_file_btn.setEnabled(true);
                        } else {
                            duplicate_found_status.setText("Failed to save invoice data for: (" + file_name + ").");
                            duplicate_found_status.setForeground(Color.red);
                        }
                    } else {
                        /*
                         This is a duplicate invoice, resend the already signed invoice.
                         Prevent user from creating PRN or a signed invoice
                         */
                        preparePRNData_btn.setEnabled(false);
                        genaratePRN_file_btn.setEnabled(false);

                        //Get the invoice data to be used to sign this new
                        DbManager db_manager = new DbManager();
                        HashMap<String, String> invoice_data_values = db_manager.get_invoice_data(existing_duplicate_invoice_name);
                        if (invoice_data_values != null) {
                            String existing_file_name = invoice_data_values.get("file_name");
                            //Check if the filenames are the same
                            if (file_name.equalsIgnoreCase(existing_duplicate_invoice_name)) {
                                //Resend the earlier signed invoice
                                if (db_manager.reset_invoice_sent_status(file_name, 0)) {
                                    duplicate_found_status.setText("Duplicate invoice (" + file_name + ") set for re-sending.");
                                    duplicate_found_status.setForeground(Color.black);
                                } else {
                                    duplicate_found_status.setText("Failed to set duplicate invoice (" + file_name + ") for re-sending.");
                                    duplicate_found_status.setForeground(Color.red);
                                }
                            } else {
                                //Sign the new duplicate invoice and send
                                String signature = invoice_data_values.get("signature");
                                if(signature == null)
                                //Temp signature
                                    signature = "none";
                                
                                String invoice_name = file_name.replace("pdf", "sen");
                                InvoiceSigner signer = new InvoiceSigner();
                                boolean sign_status = signer.sign_invoice(invoice_name, signature);
                                if (sign_status) {
                                    //Submit this new signed invoice for sending
                                    if (db_manager.insert_duplicate_signed_invoice_for_sending(file_name, recepient)) {
                                        duplicate_found_status.setText("Signed & submitted for re-sending (" + file_name + ").");
                                        duplicate_found_status.setForeground(Color.black);
                                    }else{
                                        duplicate_found_status.setText("Failed to submit for re-sending (" + file_name + ").");
                                        duplicate_found_status.setForeground(Color.black);
                                    }
                                } else {
                                    duplicate_found_status.setText("Failed to sign duplicate invoice (" + file_name + ").");
                                    duplicate_found_status.setForeground(Color.red);
                                }
                            }
                        } else {
                            JOptionPane.showMessageDialog(
                                    ManageDataExtractionBounderies.this,
                                    "Failed to get duplicate invoice data for: (" + file_name + ").",
                                    "Alert",
                                    JOptionPane.WARNING_MESSAGE);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(
                            ManageDataExtractionBounderies.this,
                            "Failed to generate prn data from: (" + file_name + ").",
                            "Alert",
                            JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageDataExtractionBounderies.this,
                        "Select an invoice file to extract data from!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
            /*
             } else {
             JOptionPane.showMessageDialog(
             ManageDataExtractionBounderies.this,
             "Set data bounderies for at least one invoice type!!",
             "Alert",
             JOptionPane.WARNING_MESSAGE);
             }
             */
        }

        void display_prn_data(HashMap<String, String> invoice_data_values) {
            String data_str = "";
            for (Object key : invoice_data_values.keySet()) {
                String field_name = (String) key;
                System.out.println(TAG + " display_prn_data(): field_name: " + field_name);
                String value = (String) invoice_data_values.get(key);
                data_str = data_str + "\n\n" + field_name + ":\t" + value;
            }

            prn_data_area.setText(data_str);
        }

        boolean check_for_duplicate_invoice_by_data(HashMap<String, String> invoice_data) {
            //Check for duplicate data in db
            DbManager db_manager = new DbManager();
            HashMap<String, String> existing_invoice_data = db_manager.check_for_duplicate_invoice_by_data(invoice_data);
            if (existing_invoice_data != null) {
                System.out.println(TAG + ", check_for_duplicate_invoice_by_data(): duplicate invoice data exists.");
                duplicate_found_status.setText("This is a duplicate invoice.");
                duplicate_found_status.setForeground(Color.red);
                return true;
            } else {
                System.out.println(TAG + ", check_for_duplicate_invoice_by_data(): duplicate invoice data doesnt exists.");
                duplicate_found_status.setText("This is a new invoice.");
                duplicate_found_status.setForeground(Color.black);
                return false;
            }
        }

    }

    class GeneratePRNDataListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (selected_file_path != null) {
                if (invoice_data_values != null) {
                    PRNGenerator prn_generator = new PRNGenerator();
                    prn_data = prn_generator.generatePRNData(invoice_data_values);
                    System.out.println(prn_data);
                    //Display PRN data
                    empty_prn_data_table();
                    displayPRNData(prn_data);
                } else {
                    JOptionPane.showMessageDialog(
                            ManageDataExtractionBounderies.this,
                            "Extract invoice data first!!",
                            "Alert",
                            JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageDataExtractionBounderies.this,
                        "Select an invoice file to extract data from!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        }

        void empty_prn_data_table() {
            int rowCount = prn_data_table.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                prnDataTableModel.removeRow(i);
            }
        }

        void displayPRNData(HashMap<String, HashMap<Integer, ArrayList<String>>> prn_data) {
            String invoice_type = null;
            for (Object key : prn_data.keySet()) {
                String field_name = (String) key;
                HashMap<Integer, ArrayList<String>> field_values_map = prn_data.get(key);
                for (int i = 0; i < field_values_map.size(); i++) {
                    ArrayList<String> field_values_array = field_values_map.get(i);
                    if (!field_name.equalsIgnoreCase("Line items")) {
                        String field_value = field_values_array.get(0);
                        if (field_name.equalsIgnoreCase("invoice_type")) {
                            invoice_type = field_value;
                            prnDataTableModel.addRow(new String[]{field_name, invoice_type});
                        } else {
                            prnDataTableModel.addRow(new String[]{field_name, field_value});
                        }
                    } else {
                        //Process line items
                        System.out.println("field_values_map: " + i);
                        System.out.println(field_values_map);
                        for (int entry_index = 0; entry_index < field_values_map.size(); entry_index++) {
                            ArrayList<String> entry_values = field_values_map.get(entry_index);
                            if (invoice_type.contains("landscape")) {
                                String item_desc = entry_values.get(0);
                                String item_qty = entry_values.get(1);
                                String total_all_incl = entry_values.get(8);
                                String line_item_values_str = item_qty + "; " + total_all_incl;
                                prnDataTableModel.addRow(new String[]{field_name + " #" + entry_index, item_desc, line_item_values_str});
                            } else if (invoice_type.contains("portrait")) {
                                String item_desc = entry_values.get(0);
                                String item_qty = entry_values.get(1);
                                String total_all_incl = entry_values.get(2);
                                String line_item_values_str = item_qty + "; " + total_all_incl;
                                prnDataTableModel.addRow(new String[]{field_name + " #" + entry_index, item_desc, line_item_values_str});
                            }
                        }

                        break;
                    }
                }
            }
        }

    }

    class GeneratePRNFileListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (selected_file_path != null) {
                if (prn_data != null) {
                    String file_name = new File(selected_file_path).getName().replace(".pdf", "");
                    PRNGenerator prn_generator = new PRNGenerator();
                    boolean create_prn_status = prn_generator.generatePRN(file_name, prn_data);
                    if (create_prn_status) {
                        //Temporarily set invoice signed status
                        DbManager db_manager = new DbManager();
                        String invoice_name = file_name.replace("sen", "pdf");
                        boolean signing_status = db_manager.set_invoice_signed_status(invoice_name, 1);
                        if (signing_status == false){
                            prn_file_status.setText("PRN created successfully.");
                        }else{
                            prn_file_status.setText("Failed to set invoice signed status.");
                        }
                        //prn_file_status.setText("PRN created successfully.");
                        //Set PRN status & recepient in db
                    } else {
                        JOptionPane.showMessageDialog(
                                ManageDataExtractionBounderies.this,
                                "Failed to create PRN commands file!!",
                                "Alert",
                                JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(
                            ManageDataExtractionBounderies.this,
                            "Eextract invoice data and prepare PRN data first!!",
                            "Alert",
                            JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageDataExtractionBounderies.this,
                        "Select an invoice file and extract data from it first!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        }

    }

    class AddBounderyListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            //Get the required field
            int required_field_index = requireFieldsCombo.getSelectedIndex();
            if (required_field_index > 0) {
                String required_field_name = requireFieldsCombo.getSelectedItem().toString();
                //Get the start tag
                int start_tag_index = startTagsCombo.getSelectedIndex();
                if (start_tag_index > 0) {
                    String start_tag = startTagsCombo.getSelectedItem().toString();
                    //Get the end tag
                    int end_tag_index = endTagsCombo.getSelectedIndex();
                    if (end_tag_index > 0) {
                        String end_tag = endTagsCombo.getSelectedItem().toString();
                        //Add this boundery to Config.INVOICE_DATA_BOUNDERIES
                        if (Config.INVOICE_DATA_BOUNDERIES == null) {
                            Config.INVOICE_DATA_BOUNDERIES = new JSONObject();
                        }

                        if (Config.INVOICE_DATA_BOUNDERIES.containsKey(selected_invoice_type)) {
                            //Update the existing bounderies
                            //Get the invoice type object from Config.INVOICE_DATA_BOUNDERIES
                            JSONObject invoice_type = (JSONObject) Config.INVOICE_DATA_BOUNDERIES.get(selected_invoice_type);
                            //Check if this invoice type already contains this required filed
                            if (invoice_type.containsKey(required_field_name)) {
                                invoice_type.remove(required_field_name);
                            }
                            //Create new tags array
                            JSONArray tags_array = new JSONArray();
                            //Add the tags in the array
                            tags_array.add(start_tag);
                            tags_array.add(end_tag);
                            //Add this field to invoice type object
                            invoice_type.put(required_field_name, tags_array);
                            //Add the invoice type to Config.INVOICE_DATA_BOUNDERIES
                            Config.INVOICE_DATA_BOUNDERIES.put(selected_invoice_type, invoice_type);

                            //Remove the corresponding row from the bounderies table
                            remove_boundery_from_table(required_field_name);
                        } else {
                            //Add new boundery
                            JSONObject invoice_type = new JSONObject();
                            JSONArray tags_array = new JSONArray();
                            //Add the tags in the array
                            tags_array.add(start_tag);
                            tags_array.add(end_tag);
                            //Add this field to invoice type object
                            invoice_type.put(required_field_name, tags_array);
                            //Add the invoice type to Config.INVOICE_DATA_BOUNDERIES
                            Config.INVOICE_DATA_BOUNDERIES.put(selected_invoice_type, invoice_type);
                        }

                        //Display this boundery on bounderies table
                        add_to_bounderies_table(required_field_name, start_tag, end_tag);
                        //Activate the save_bounderies_btn
                        save_bounderies_btn.setEnabled(true);
                        //Activate delete_boundery_btn & set visible
                        delete_boundery_btn.setEnabled(true);
                        delete_boundery_btn.setVisible(true);

                        //Try to extract the data for this boundery
                        extractData(required_field_name, start_tag, end_tag);
                    } else {
                        JOptionPane.showMessageDialog(
                                ManageDataExtractionBounderies.this,
                                "Select a start tag first!!",
                                "Alert",
                                JOptionPane.WARNING_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(
                            ManageDataExtractionBounderies.this,
                            "Select a start tag first!!",
                            "Alert",
                            JOptionPane.WARNING_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageDataExtractionBounderies.this,
                        "Select a require field name first!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        }

        void add_to_bounderies_table(String required_field, String start_tag, String end_tag) {
            bounderiesTableModel.addRow(new String[]{required_field, start_tag, end_tag});

            //bounderiesTable.setModel(bounderiesTableModel);
        }

        void remove_boundery_from_table(String required_field) {
            for (int i = 0; i < bounderiesTableModel.getRowCount(); i++) {
                if (((String) bounderiesTableModel.getValueAt(i, 0)).equals(required_field)) {
                    bounderiesTableModel.removeRow(i);
                }//end of if block
            }
        }

    }

    void extractData(String required_field, String start_tag, String end_tag) {
        if (selected_file_path != null) {
            String pageText = read_next_page();
            DataExtractor data_extractor = new DataExtractor();
            String extraction_response = data_extractor.extract_data(pageText, start_tag, end_tag);
            if (!extraction_response.contains("Error #")) {
                //Display the extracted data
                fieldName.setText(required_field);
                startTag.setText(start_tag);
                endTag.setText(end_tag);

                extracted_data_area.setText(extraction_response);
            } else {
                //An error has occured
                String err_msg = Config.DATA_EXTRACTION_ERRORS.get(extraction_response);
                JOptionPane.showMessageDialog(
                        ManageDataExtractionBounderies.this,
                        err_msg,
                        "Data extraction Error",
                        JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(
                    ManageDataExtractionBounderies.this,
                    "No template file has been opened!!",
                    "Alert",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    class DeleteBounderyListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            //Get the invoice type object from Config.INVOICE_DATA_BOUNDERIES
            JSONObject invoice_type = (JSONObject) Config.INVOICE_DATA_BOUNDERIES.get(selected_invoice_type);
            System.out.println("Initial invoice_type: " + invoice_type);
            int rowIndex = bounderiesTable.getSelectedRow();
            //Get the field name selected
            String required_field_name = (String) bounderiesTableModel.getValueAt(rowIndex, 0);
            //Remove this field from invoice_type object
            invoice_type.remove(required_field_name);
            //Put back invoice_type object into Config.INVOICE_DATA_BOUNDERIES
            Config.INVOICE_DATA_BOUNDERIES.replace(selected_invoice_type, invoice_type);
            boolean save_status = SystemInit.serialize_object_to_file("invoice_data_bounderies", Config.INVOICE_DATA_BOUNDERIES);
            if (save_status) {
                System.out.println("Final invoice_type: " + invoice_type);
                bounderiesTableModel.removeRow(rowIndex);
                status_line.setText("Bounderys deleted successfully.");
            } else {
                status_line.setText("Failed to delete boundery.");
            }

        }

    }

    class SaveBounderiesListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            boolean save_status = SystemInit.serialize_object_to_file("invoice_data_bounderies", Config.INVOICE_DATA_BOUNDERIES);
            if (save_status) {
                status_line.setText("Bounderies saved successfully.");
            } else {
                status_line.setText("Failed to save bounderies.");
            }
        }

    }

    class OpenTemplateListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            //Reset flags
            selected_file_path = null;
            page_count = 0;
            current_page = 0;

            JFileChooser jfc = new JFileChooser();
            jfc.setCurrentDirectory(new File("."));
            jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            jfc.setDialogTitle("Select an invoice template.");
            jfc.setAcceptAllFileFilterUsed(false);
            FileNameExtensionFilter filter = new FileNameExtensionFilter("PDF", "pdf");
            jfc.addChoosableFileFilter(filter);

            int returnValue = jfc.showOpenDialog(null);
            if (returnValue == JFileChooser.APPROVE_OPTION) {
                selected_file_path = jfc.getSelectedFile().getPath();
                String selected_file_name = jfc.getName(new File(selected_file_path));
                System.out.println(selected_file_path);
                System.out.println("selected_file_name: " + selected_file_name);

                template_name.setText(selected_file_name);

                //Read the template
                FilesScanner files_scanner = new FilesScanner();
                if (files_scanner.check_if_its_invoice(selected_file_path)) {
                    template_name.setForeground(Color.black);
                    read_first_page_data(selected_file_path);
                } else {
                    template_name.setText(selected_file_name + "(not invoice)");
                    template_name.setForeground(Color.red);
                }

            }
        }

    }

    void read_first_page_data(String file_path_name) {
        //Get page count for this file
        PdfManager pdf_manager = new PdfManager();
        page_count = pdf_manager.get_number_of_pages(file_path_name);
        if (page_count > 0) {
            //Read the first page text
            current_page = 1;
            String pageText = pdf_manager.get_page_text(current_page, file_path_name);
            if (pageText != null) {
                //Display the text
                invoice_template_data_area.setText(pageText);
                //set pagination info
                pagination_label.setText(current_page + " of " + page_count);
                //Set pagination btns
                if (page_count > current_page) {
                    prevPage.setEnabled(false);
                    nextPage.setEnabled(true);
                } else {
                    prevPage.setEnabled(false);
                    nextPage.setEnabled(false);
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageDataExtractionBounderies.this,
                        "Failed to get page 1 text for this file!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(
                    ManageDataExtractionBounderies.this,
                    "Failed to get page count for this file!!",
                    "Alert",
                    JOptionPane.WARNING_MESSAGE);
        }
    }

    String read_next_page() {
        PdfManager pdf_manager = new PdfManager();
        String pageText = pdf_manager.get_page_text(current_page, selected_file_path);
        if (pageText != null) {
            //Display the text
            invoice_template_data_area.setText(pageText);
            //set pagination info
            pagination_label.setText(current_page + " of " + page_count);
            //Set pagination next btn
            if (page_count > current_page) {
                nextPage.setEnabled(true);
            } else {
                nextPage.setEnabled(false);
            }

            //Set pagination prev btn
            if (current_page > 1) {
                prevPage.setEnabled(true);
            } else {
                prevPage.setEnabled(false);
            }

            return pageText;
        } else {
            JOptionPane.showMessageDialog(
                    ManageDataExtractionBounderies.this,
                    "Failed to read page " + current_page + " of this file!!",
                    "Alert",
                    JOptionPane.WARNING_MESSAGE);
            return null;
        }
    }

    class PaginationListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (selected_file_path != null) {
                if (e.getSource() == nextPage) {
                    //Increment current_page 
                    current_page++;
                    if (current_page <= page_count) {
                        //Read the current_page
                        read_next_page();
                    }
                } else if (e.getSource() == prevPage) {
                    //Increment current_page 
                    current_page--;
                    if (current_page > 0) {
                        //Read the current_page
                        read_next_page();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(
                        ManageDataExtractionBounderies.this,
                        "Choose an invoice template file first!!",
                        "Alert",
                        JOptionPane.WARNING_MESSAGE);
            }
        }

    }

}
